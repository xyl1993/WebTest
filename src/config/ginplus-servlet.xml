<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:task="http://www.springframework.org/schema/task"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
	http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
	http://www.springframework.org/schema/mvc
	http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd
	http://www.springframework.org/schema/aop
	http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx.xsd
	http://www.springframework.org/schema/context
	http://www.springframework.org/schema/context/spring-context-3.0.xsd
	http://www.springframework.org/schema/task
	http://www.springframework.org/schema/task/spring-task-3.0.xsd">
	
	<!--
		<bean id="scheduler" class="org.springframework.scheduling.timer.TimerFactoryBean">
			<property name="scheduledTimerTasks">
				<list>
					<ref bean="repeatingTrigger" />
				</list>
			</property>
		</bean>
		-->

	<!-- Root Context: defines shared resources visible to all other web components 
		<bean id="propertyConfigurer"
			class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"
			p:location="classpath:config/jdbc.properties" /> 
			//用下面的办法直接提取properties
		-->
	<context:property-placeholder location="classpath:config/jdbc.properties" />
	
	<!--自动扫描该包下所有的组件,根据标注处理-->
	<!-- enable autowire -->
	<context:annotation-config /> 
	
	<!-- 开启定时器 -->
	<context:component-scan base-package="
		base,
		webservice.controller,
		webservice.service.impl,
		menu.controller,
		menu.service.impl,
		register.controller,
		register.service.impl,
		medicine.controller,
		medicine.service.impl,
		common.controller,
		common.service.impl,
		sfzx.controller,
		sfzx.service.impl,
		qyzx.controller,
		qyzx.service.impl,
		report.controller,
		report.service.impl,
		treatMent.controller,
		treatMent.service.impl,
		user.controller,
		user.service.impl
		"/>
	<!-- Configures the @Controller programming model 必须加上这个，不然请求controller时会出现no mapping url错误-->
	<mvc:annotation-driven />  
	<!-- 用apache的datasource -->
	<bean id="dataSource"   class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close"
		p:driverClassName="${jdbc.driverClassName}"
		p:url="${jdbc.databaseurl}"
		p:username="${jdbc.username}"
		p:password="${jdbc.password}" >
		<property name="maxActive">
			<value>${jdbc.maxActive}</value>
		</property>  
		<property name="initialSize">
			<value>${jdbc.initialSize}</value>
		</property>  
		<property name="maxWait">
			<value>${jdbc.maxWait}</value>
		</property>  
		<property name="maxIdle">
			<value>${jdbc.maxIdle}</value>
		</property>
		<property name="minIdle">
			<value>${jdbc.minIdle}</value>
		</property>
		<!--  
			<property name="removeAbandoned"><value>true</value></property>
			<property name="removeAbandonedTimeout"><value>180</value></property>  
			<property name="testOnBorrow"><value>true</value></property>
			<property name="testOnReturn"><value>true</value></property>
			<property name="testWhileIdle"><value>true</value></property>
			<property name="validationQuery"><value>select count(*) from code_type</value></property>
			<property name="validationQueryTimeout"><value>2</value></property> -->
		<!-- 只要下面两个参数设置成小于8小时(MySql默认)，就能避免MySql的8小时自动断开连接问题 -->
		<property name="timeBetweenEvictionRunsMillis">
			<value>18000000</value>
		</property><!-- 5小时 -->
		<property name="minEvictableIdleTimeMillis">
			<value>10800000</value>
		</property><!-- 3小时 -->
	</bean>
	
	<!-- define the SqlSessionFactory -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="typeAliasesPackage" value="
			base,
			menu,
			user,
			register,
			common,
			sfzx,
			qyzx,
			report,
			medicine,
			treatMent,
			webservice"/>
		<!-- 设定分页插件 -->
		<property name="plugins">
			<bean class="gp.util.db.PagingInterceptor" />
		</property>
		<!-- 可以单独指定mybatis的配置文件，或者写在本文件里面。 用下面的自动扫描装配(推荐)或者单独mapper 
			<property name="configLocation" value="classpath:config/mybatis-config.xml" />
			-->
	</bean>
	
	<!-- scan for mappers and let them be autowired -->
	<!-- 自动扫描并组装MyBatis的映射文件和接口-->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="
			base.*.mapper,
			menu.mapper,
			user.mapper,
			register.mapper,
			medicine.mapper,
			sfzx.mapper,
			report.mapper,
			qyzx.mapper,
			common.mapper,
			treatMent.mapper,
			webservice.mapper"/>
	</bean>
	
	<!-- enable transaction demarcation with annotations -->
	<tx:annotation-driven transaction-manager="transactionManager"  />
	<!-- transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- AOP 相关 -->
	<bean id="mapperInterceptor" class="gp.util.db.MapperInterceptor">
		<property name="dataSource" ref="dataSource" />
	</bean>
</beans>